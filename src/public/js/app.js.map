{"version":3,"file":"js/app.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;AA2BA;AAOA;;;;;;;;;;;;;;;;;ACnCA;AAyBA;AAYA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpDA;;;;;;;;;;;;;;;;;ACAA;AAIA;;;;;;;;;;;ACJA","sources":["webpack://tachyus-elkin/./src/app/app.js","webpack://tachyus-elkin/./src/app/components/Line.js","webpack://tachyus-elkin/./src/app/config-column/index.js","webpack://tachyus-elkin/./src/app/index.js","webpack://tachyus-elkin/./src/app/css/styles.css"],"sourcesContent":["import React from \"react\";\r\nimport { Card, Table, Drawer, Button, Tabs, Select } from \"antd\";\r\nimport { EnvironmentOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { compsColumns, prodsColumns } from \"./config-column\";\r\nimport { DataGraphLine } from \"./components/Line\";\r\n\r\nexport default () => {\r\n  const [load, setLoad] = React.useState(true);\r\n  const [graph, setGraph] = React.useState([]);\r\n  const [search, setSearch] = React.useState([]);\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [completions, setCompletions] = React.useState([]);\r\n  const [productions, setProductions] = React.useState([]);\r\n\r\n  const getCompletions = async () => {\r\n    return axios.get(\"api/v1/completions\").then((res) => res.data);\r\n  };\r\n\r\n  const getProductions = async () => {\r\n    return axios.get(\"api/v1/productions\").then((res) => res.data);\r\n  };\r\n\r\n  const keyProduction = (year, item, ref, table, node) => {\r\n    const value = Math.round(item[ref]);\r\n    const rowValue = table[node][year]?.value;\r\n    if (typeof rowValue === \"number\") {\r\n      // console.log(\"sum:\", rowValue, value);\r\n      return {\r\n        year,\r\n        category: node,\r\n        value: Math.round(rowValue) + value,\r\n      };\r\n    }\r\n    // console.log(\"init:\", value);\r\n    return {\r\n      year,\r\n      category: node,\r\n      value: value,\r\n    };\r\n  };\r\n\r\n  const mapGraph = (items = []) => {\r\n    const tabla = {\r\n      oil: {},\r\n      gas: {},\r\n      water: {},\r\n    };\r\n    for (const item of items) {\r\n      const key = item.Year;\r\n      tabla.oil[key] = keyProduction(key, item, \"Qo\", tabla, \"oil\");\r\n      tabla.gas[key] = keyProduction(key, item, \"Qg\", tabla, \"gas\");\r\n      tabla.water[key] = keyProduction(key, item, \"Qw\", tabla, \"water\");\r\n    }\r\n    const _oil = Object.values(tabla.oil);\r\n    const _gas = Object.values(tabla.gas);\r\n    const _water = Object.values(tabla.water);\r\n    const _graph = [..._oil, ..._gas, ..._water].sort(\r\n      ({ year: a }, { year: b }) => a - b\r\n    );\r\n    setGraph(_graph);\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    if (!value || (Array.isArray(value) && !value.length)) {\r\n      setSearch([]);\r\n      return;\r\n    }\r\n    setSearch(`${value}`.split(\",\"));\r\n  };\r\n\r\n  const _prod = React.useMemo(() => {\r\n    if (Array.isArray(search) && !search.length) return productions;\r\n    return productions.filter(({ wellAPI }) => search.includes(wellAPI));\r\n  }, [productions, search]);\r\n\r\n  const _comp = React.useMemo(() => {\r\n    if (Array.isArray(search) && !search.length) return completions;\r\n    return completions.filter(({ wellAPI }) => search.includes(wellAPI));\r\n  }, [completions, search]);\r\n\r\n  React.useEffect(() => {\r\n    getCompletions().then(({ data }) => setCompletions(data));\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    getProductions().then(({ data = [] }) => {\r\n      const map = data.map((i) => {\r\n        return {\r\n          ...i,\r\n          Gross: Math.round(i?.Qo + i?.Qw),\r\n        };\r\n      });\r\n      setProductions(map);\r\n    });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (!load) return;\r\n    if (!Array.isArray(completions) || !completions.length) return;\r\n    if (!Array.isArray(productions) || !productions.length) return;\r\n    setLoad(false);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    mapGraph(_prod);\r\n  }, [_prod]);\r\n\r\n  return (\r\n    <div\r\n      className={\"mv20\"}\r\n      style={{\r\n        maxWidth: 1024,\r\n        marginTop: 10,\r\n        margin: \"10px auto\",\r\n      }}\r\n    >\r\n      <Card\r\n        title=\"Search filter\"\r\n        extra={\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            onClick={() => setVisible(true)}\r\n            icon={<EnvironmentOutlined />}\r\n          >\r\n            See map\r\n          </Button>\r\n        }\r\n        className=\"br10\"\r\n      >\r\n        <Select\r\n          mode=\"multiple\"\r\n          allowClear\r\n          style={{ width: \"100%\" }}\r\n          placeholder={\"Please select a well\"}\r\n          defaultValue={[]}\r\n          onChange={handleChange}\r\n          optionFilterProp=\"children\"\r\n          filterOption={(input, option) => option.children.includes(input)}\r\n          filterSort={(optionA, optionB) =>\r\n            optionA.children\r\n              .toLowerCase()\r\n              .localeCompare(optionB.children.toLowerCase())\r\n          }\r\n        >\r\n          {Array.isArray(completions)\r\n            ? completions.map(({ wellAPI, wellName, Type }, i) => (\r\n                <Select.Option key={i} value={wellAPI}>\r\n                  {`${wellName} - (type: ${Type})`}\r\n                </Select.Option>\r\n              ))\r\n            : null}\r\n        </Select>\r\n      </Card>\r\n\r\n      <Card\r\n        title={\r\n          <React.Fragment>\r\n            <strong style={{ fontSize: \"1.5em\" }}>Completions</strong>\r\n            <br />\r\n            <small style={{ color: \"#CCC\" }}>\r\n              <i>List of completed wells</i>\r\n            </small>\r\n          </React.Fragment>\r\n        }\r\n        className=\"br10 mv10\"\r\n      >\r\n        <Table\r\n          columns={compsColumns}\r\n          dataSource={_comp}\r\n          pagination={{\r\n            pageSize: 50,\r\n          }}\r\n          scroll={{\r\n            y: 500,\r\n            x: 900,\r\n          }}\r\n        />\r\n      </Card>\r\n\r\n      <Card\r\n        title={\r\n          <React.Fragment>\r\n            <strong style={{ fontSize: \"1.5em\" }}>Productions</strong>\r\n            <br />\r\n            <small style={{ color: \"#CCC\" }}>\r\n              <i>List of produced by well</i>\r\n            </small>\r\n          </React.Fragment>\r\n        }\r\n        className=\"br10 mv10\"\r\n      >\r\n        <Tabs>\r\n          <Tabs.TabPane tab=\"Data table\" key=\"item-1\">\r\n            <Table\r\n              columns={prodsColumns}\r\n              dataSource={_prod}\r\n              pagination={{ pageSize: 50 }}\r\n              scroll={{ y: 500, x: 900 }}\r\n            />\r\n          </Tabs.TabPane>\r\n          <Tabs.TabPane tab=\"Data graph\" key=\"item-2\">\r\n            <DataGraphLine data={graph} />\r\n          </Tabs.TabPane>\r\n        </Tabs>\r\n      </Card>\r\n\r\n      <Drawer\r\n        title={\r\n          <React.Fragment>\r\n            <strong>Well geolocation.</strong>\r\n            <br />\r\n            <small style={{ color: \"#CCC\" }}>\r\n              <i>We mark on the map the location of each well</i>\r\n            </small>\r\n          </React.Fragment>\r\n        }\r\n        placement={\"bottom\"}\r\n        closable={false}\r\n        onClose={() => setVisible(false)}\r\n        open={visible}\r\n        key={\"bottom\"}\r\n      >\r\n        <center>\r\n          <h1>Google map</h1>\r\n        </center>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"@ant-design/plots\";\r\n\r\nexport const DataGraphLine = ({ data = [] }) => {\r\n  const COLOR_PLATE_10 = [\r\n    \"#5B8FF9\",\r\n    \"#5AD8A6\",\r\n    \"#5D7092\",\r\n    \"#F6BD16\",\r\n    \"#E8684A\",\r\n    \"#6DC8EC\",\r\n    \"#9270CA\",\r\n    \"#FF9D4D\",\r\n    \"#269A99\",\r\n    \"#FF99C3\",\r\n  ];\r\n\r\n  const config = {\r\n    data: data.filter((_, i) => i < 1000),\r\n    xField: \"year\",\r\n    yField: \"value\",\r\n    seriesField: \"category\",\r\n    yAxis: {\r\n      label: {\r\n        // formatter: (v) => Number(v),\r\n        formatter: (v) =>\r\n          `${v}`.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (s) => `${s},`),\r\n      },\r\n    },\r\n    color: COLOR_PLATE_10,\r\n    point: {\r\n      shape: ({ reservoir }) => {\r\n        return \"circle\";\r\n      },\r\n      style: ({ year }) => {\r\n        return {\r\n          r: Number(year) % 4 ? 0 : 3, // 4 个数据示一个点标记\r\n        };\r\n      },\r\n    },\r\n  };\r\n\r\n  /*\r\n  const config = {\r\n    data,\r\n    padding: \"auto\",\r\n    xField: \"Year\",\r\n    yField: \"Qo\",\r\n    xAxis: {\r\n      tickCount: 5,\r\n    },\r\n  };\r\n  */\r\n\r\n  return <Line {...config} />;\r\n};\r\n","import React from \"react\";\r\nimport { Tag } from \"antd\";\r\n\r\nconst width = 100;\r\nconst tagStatus = (status = false) => {\r\n  let color = status ? \"green\" : \"red\";\r\n  let text = status ? \"Enabled\" : \"Disabled\";\r\n  return <Tag color={color}>{text}</Tag>;\r\n};\r\n\r\nexport const compsColumns = [\r\n  {\r\n    title: \"Well name\",\r\n    dataIndex: \"wellName\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Well api\",\r\n    dataIndex: \"wellAPI\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Bore id\",\r\n    dataIndex: \"boreID\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"comp sub id\",\r\n    dataIndex: \"compSubId\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    dataIndex: \"Type\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"X\",\r\n    dataIndex: \"X\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Y\",\r\n    dataIndex: \"Y\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"TD\",\r\n    dataIndex: \"TD\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Is horizontal\",\r\n    dataIndex: \"isHorizontal\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"reservoir\",\r\n    dataIndex: \"reservoir\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Fault block\",\r\n    dataIndex: \"faultBlock\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"compartment\",\r\n    dataIndex: \"compartment\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"max BHP\",\r\n    dataIndex: \"maxBHP\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"long\",\r\n    dataIndex: \"long\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"lat\",\r\n    dataIndex: \"lat\",\r\n    width,\r\n  },\r\n];\r\n\r\nexport const prodsColumns = [\r\n  {\r\n    title: \"wellAPI\",\r\n    dataIndex: \"wellAPI\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Q, Oil\",\r\n    dataIndex: \"Qo\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Q, Water\",\r\n    dataIndex: \"Qw\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Q, gas\",\r\n    dataIndex: \"Qg\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Gross\",\r\n    dataIndex: \"Gross\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Qs\",\r\n    dataIndex: \"Qs\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"Status\",\r\n    render: (status) => tagStatus(status),\r\n    width,\r\n  },\r\n  {\r\n    title: \"boreID\",\r\n    dataIndex: \"boreID\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"compSubId\",\r\n    dataIndex: \"compSubId\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"BHP\",\r\n    dataIndex: \"BHP\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"CompL\",\r\n    dataIndex: \"CompL\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"FlowDays\",\r\n    dataIndex: \"FlowDays\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Pressure\",\r\n    dataIndex: \"Pressure\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Year\",\r\n    dataIndex: \"Year\",\r\n    width,\r\n  },\r\n  {\r\n    title: \"Month\",\r\n    dataIndex: \"Month\",\r\n    width,\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport * as ReactDOM from \"react-dom/client\";\r\nimport App from \"./app\";\r\n// STYLES\r\nimport \"antd/dist/antd.css\";\r\nimport \"./css/styles.css\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"app\"));\r\nroot.render(<App />);\r\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}